public class Code06_PrintB {
    public static void print(int num) {
        for (int i = 31; i >= 0; i--) {
/**  位 运算 笔记
 *   1 往右位移 i 位 和 num的32位 做于运算
 *   于运算： 都是1 才是1
 *   数字 左移一位 等于 这个数据 × 2
 *   32位 最大表示 从2的0次方到 2的32次方减一 大概40亿多
 *   java中 是 2的31次方减一 大概 20多亿 32位表示为 01111111111111111111111111111111
 *   因为java32位是有符号的表示 开头一位0是留给符号的 所以 java32位表示的是 -2的31次方到2的31次方减1
 *   为什么是 2 的 31 次方 减1  因为 0 要占一位
 *  java 里 开头位是0 代表 这个数是个 非负整数 开头是1代表是负数
 *  java 32 负数 表示 是 取反 加1  比如 -1 位  11111111111111111111111111111111 每位取反 加 1
 *  ~ 是取反的意思 32位取反
 *  java 32 最小位 10000000000000000000000000000000  算值为 每位取反后 加1 就是 1000000000....00  为2的31次方然后加个负号
 *为什么 负数要 取反加以 目的是 为了 加减乘除 位运算时候 都是一套逻辑 要不然  因为有负数的原因 每个 加减乘除运算都要多几套位运算逻辑
 *   >> 带符号 右移动 就是 符号位是什么 补什么
 *   >>> 不带符号 右移动  就是 右边补0
 *  | 或门 有1 为 1
 *  & 与门  都为1 是1
 *  ^ 异或门 相同为0 不同为1
 *
 *  a 的负数  除了可以 这么表示  int a =5
 *                          int b = - a
 *   还可以这么 表示         int b = ~a +1   这个 例子 表示了 为什么 负数表示要 取反加1
 *   最小负数 取反 ➕ 1 还是 他自己
  */

            System.out.print((num & (1 << i)) == 0 ? "0" : "1");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        print(32);
        System.out.println(3 & 1);

    }
}
